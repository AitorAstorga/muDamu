package dao;

import java.sql.Timestamp;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.sun.jersey.api.NotFoundException;

import config.MySQLConfig;
import dto.Medico;
import dto.Prediccion;
import dto.User;

/**
 * User Data Access Object (DAO).
 * This class contains all database handling that is needed to 
 * permanently store and retrieve User object instances. 
 */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/ It has been
 * programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed under
 * the terms of GNU GPL license. The full text for license is available in GNU
 * project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is 5 USD or
 * 5 Eur for each database table, you are generating code for. (That includes
 * unlimited amount of iterations with all supported languages for each database
 * table you are paying for.) Send mail to "Tuomo.Lukka@iki.fi" for more
 * information. Thank you!
 */

public class UserDao {
	private MySQLConfig mysqlConfig;

	public UserDao() {
		mysqlConfig = MySQLConfig.getInstance();
	}

	/**
	 * createValueObject-method. This method is used when the Dao class needs to
	 * create new value object instance. The reason why this method exists is that
	 * sometimes the programmer may want to extend also the valueObject and then
	 * this method can be overrided to return extended valueObject. NOTE: If you
	 * extend the valueObject class, make sure to override the clone() method in it!
	 */

	public Medico createValueObjectMedico() {
		return new Medico();
	}

	public User createValueObject() {
		return new User();
	}

	/**
	 * getObject-method. This will create and load valueObject contents from
	 * database using given Primary-Key as identifier. This method is just a
	 * convenience method for the real load-method which accepts the valueObject as
	 * a parameter. Returned valueObject will be created using the
	 * createValueObject() method.
	 */
	public User getObject(int IDpaciente) {
		Connection conn = mysqlConfig.connect();
		User valueObject = createValueObject();
		valueObject.setpacienteID(IDpaciente);
		load(valueObject);
		return valueObject;
	}

	public User getObject(String username) {

		Connection conn = mysqlConfig.connect();
		User valueObject = createValueObject();
		valueObject.setTarjetaSanitaria(username);
		login(valueObject);
		return valueObject;
	}

	public Medico getObjectMedico(String username) {

		Connection conn = mysqlConfig.connect();
		Medico valueObject = createValueObjectMedico();
		valueObject.setUsername(username);
		medicoLogin(valueObject);
		return valueObject;
	}

	/**
	 * load-method. This will load valueObject contents from database using
	 * Primary-Key as identifier. Upper layer should use this so that valueObject
	 * instance is created and only primary-key should be specified. Then call this
	 * method to complete other persistent information. This method will overwrite
	 * all other fields except primary-key and possible runtime variables. If load
	 * can not find matching row, NotFoundException will be thrown.
	 *
	 * @param conn        This method requires working database connection.
	 * @param valueObject This parameter contains the class instance to be loaded.
	 *                    Primary-key field must be set for this to work properly.
	 */
	public void load(User valueObject) {
		Connection conn = mysqlConfig.connect();

		String sql = "SELECT * FROM pacientes WHERE (pacienteID = ? ) ";
		PreparedStatement stmt = null;

		try {
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, valueObject.getpacienteID());

			singleQuery(conn, stmt, valueObject);
		} catch (SQLException e) {
			Logger l = Logger.getLogger(e.getMessage());
			l.log(Level.SEVERE, "context", e);

		} finally {
			if (stmt != null)
				try {
					stmt.close();
				} catch (SQLException e) {
					Logger l = Logger.getLogger(e.getMessage());
					l.log(Level.SEVERE, "context", e);
				}
		}
	}

	public void login(User valueObject) {
		Connection conn = mysqlConfig.connect();
		String sql = "SELECT * FROM pacientes WHERE (tarjetaSanitaria = ? ) ";

		PreparedStatement stmt = null;

		try {
			stmt = conn.prepareStatement(sql);
			stmt.setString(1, valueObject.getTarjetaSanitaria());
			singleQuery(conn, stmt, valueObject);
		} catch (SQLException e) {
			Logger l = Logger.getLogger(e.getMessage());
			l.log(Level.SEVERE, "context", e);

		} finally {
			if (stmt != null)
				try {
					stmt.close();
				} catch (SQLException e) {
					Logger l = Logger.getLogger(e.getMessage());
					l.log(Level.SEVERE, "context", e);
				}
		}
	}

	public void medicoLogin(Medico valueObject) {
		Connection conn = mysqlConfig.connect();
		String sql = "SELECT * FROM trabajadores WHERE (username = ? ) ";

		PreparedStatement stmt = null;

		try {
			stmt = conn.prepareStatement(sql);
			stmt.setString(1, valueObject.getUsername());
			singleQueryMedico(conn, stmt, valueObject);
		} catch (SQLException e) {
			Logger l = Logger.getLogger(e.getMessage());
			l.log(Level.SEVERE, "context", e);

		} finally {
			if (stmt != null)
				try {
					stmt.close();
				} catch (SQLException e) {
					Logger l = Logger.getLogger(e.getMessage());
					l.log(Level.SEVERE, "context", e);
				}
		}
	}

	/**
	 * LoadAll-method. This will read all contents from database table and build a
	 * List containing valueObjects. Please note, that this method will consume huge
	 * amounts of resources if table has lot's of rows. This should only be used
	 * when target tables have only small amounts of data.
	 *
	 * @param conn This method requires working database connection.
	 */
	public List loadAll() throws SQLException {

		Connection conn = mysqlConfig.connect();
		String sql = "SELECT * FROM pacientes ORDER BY pacienteID ASC ";
		List searchResults = listQuery(conn, conn.prepareStatement(sql), true);

		return searchResults;
	}

	public List loadAllMedicos() throws SQLException {
		Connection conn = mysqlConfig.connect();
		String sql = "SELECT * FROM trabajadores ORDER BY trabajadorID ASC ";
		List searchResults = listQuery(conn, conn.prepareStatement(sql), false);

		return searchResults;
	}

	/**
	 * create-method. This will create new row in database according to supplied
	 * valueObject contents. Make sure that values for all NOT NULL columns are
	 * correctly specified. Also, if this table does not use automatic
	 * surrogate-keys the primary-key must be specified. After INSERT command this
	 * method will read the generated primary-key back to valueObject if automatic
	 * surrogate-keys were used.
	 *
	 * @param conn        This method requires working database connection.
	 * @param valueObject This parameter contains the class instance to be created.
	 *                    If automatic surrogate-keys are not used the Primary-key
	 *                    field must be set for this to work properly.
	 */

	public synchronized void create(User valueObject) throws SQLException {
		Connection conn = mysqlConfig.connect();
		String sql = "";
		PreparedStatement stmt = null;
		ResultSet result = null;

		try {
			sql = "INSERT INTO pacientes (salt, tarjetaSanitaria, password) VALUES (?, ?, ?) ";

			stmt = conn.prepareStatement(sql);

			String salt = new String("salt");
			stmt.setString(1, salt);
			stmt.setString(2, valueObject.getTarjetaSanitaria());
			String psw = valueObject.getPassword();
			stmt.setString(3, psw);

			int rowcount = databaseUpdate(conn, stmt);
			if (rowcount != 1) {
				throw new SQLException("PrimaryKey Error when updating DB!");
			}

		} finally {
			if (stmt != null)
				stmt.close();
		}

	}
	
	public synchronized void createMedico(Medico valueObject) throws SQLException {
		Connection conn = mysqlConfig.connect();
		String sql = "";
		PreparedStatement stmt = null;
		ResultSet result = null;

		try {
			sql = "INSERT INTO trabajadores (salt, username, password, nombre, apellido1, apellido2, telefono, email, tipo) VALUES "
					+ "(?, ?, ?, ?, ?, ?, ?, ?, ?) ";

			stmt = conn.prepareStatement(sql);

			String salt = new String("salt");
			stmt.setString(1, salt);
			stmt.setString(2, valueObject.getUsername());
			String psw = valueObject.getPassword();
			stmt.setString(3, psw);
			stmt.setString(4, valueObject.getNombre());
			stmt.setString(5, valueObject.getApellido1());
			stmt.setString(6, valueObject.getApellido2());
			stmt.setString(7, valueObject.getTelefono());
			stmt.setString(8, valueObject.getEmail());
			stmt.setString(9, valueObject.getTipo());

			int rowcount = databaseUpdate(conn, stmt);
			if (rowcount != 1) {
				throw new SQLException("PrimaryKey Error when updating DB!");
			}

		} finally {
			if (stmt != null)
				stmt.close();
		}

	}


	/**
	 * delete-method. This method will remove the information from database as
	 * identified by by primary-key in supplied valueObject. Once valueObject has
	 * been deleted it can not be restored by calling save. Restoring can only be
	 * done using create method but if database is using automatic surrogate-keys,
	 * the resulting object will have different primary-key than what it was in the
	 * deleted object. If delete can not find matching row, NotFoundException will
	 * be thrown.
	 *
	 * @param conn        This method requires working database connection.
	 * @param valueObject This parameter contains the class instance to be deleted.
	 *                    Primary-key field must be set for this to work properly.
	 */
	public void delete(Integer id) throws NotFoundException, SQLException {
		Connection conn = mysqlConfig.connect();
		String sql = "DELETE FROM pacientes WHERE (pacienteID = ? ) ";
		PreparedStatement stmt = null;

		try {
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, id);

			int rowcount = databaseUpdate(conn, stmt);
			if (rowcount == 0) {
				// System.out.println("Object could not be deleted (PrimaryKey not found)");
				throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
			}
			if (rowcount > 1) {
				// System.out.println("PrimaryKey Error when updating DB! (Many objects were
				// deleted!)");
				throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
			}
		} finally {
			if (stmt != null)
				stmt.close();
		}
	}

	public void medicoDelete(String username) throws NotFoundException, SQLException {
		Connection conn = mysqlConfig.connect();
		String sql = "DELETE FROM trabajadores WHERE (username = ? ) ";
		PreparedStatement stmt = null;

		try {
			stmt = conn.prepareStatement(sql);
			stmt.setString(1, username);

			int rowcount = databaseUpdate(conn, stmt);
			if (rowcount == 0) {
				// System.out.println("Object could not be deleted (PrimaryKey not found)");
				throw new NotFoundException("Object could not be deleted! (PrimaryKey not found)");
			}
			if (rowcount > 1) {
				// System.out.println("PrimaryKey Error when updating DB! (Many objects were
				// deleted!)");
				throw new SQLException("PrimaryKey Error when updating DB! (Many objects were deleted!)");
			}
		} finally {
			if (stmt != null)
				stmt.close();
		}
	}

	/**
	 * deleteAll-method. This method will remove all information from the table that
	 * matches this Dao and ValueObject couple. This should be the most efficient
	 * way to clear table. Once deleteAll has been called, no valueObject that has
	 * been created before can be restored by calling save. Restoring can only be
	 * done using create method but if database is using automatic surrogate-keys,
	 * the resulting object will have different primary-key than what it was in the
	 * deleted object. (Note, the implementation of this method should be different
	 * with different DB backends.)
	 *
	 * @param conn This method requires working database connection.
	 */
	public void deleteAll(Connection conn) throws SQLException {

		String sql = "DELETE FROM pacientes";
		PreparedStatement stmt = null;

		try {
			stmt = conn.prepareStatement(sql);
			int rowcount = databaseUpdate(conn, stmt);
		} finally {
			if (stmt != null)
				stmt.close();
		}
	}

	/**
	 * getDaogenVersion will return information about generator which created these
	 * sources.
	 */
	public String getDaogenVersion() {
		return "DaoGen version 2.4.1";
	}

	/**
	 * databaseUpdate-method. This method is a helper method for internal use. It
	 * will execute all database handling that will change the information in
	 * tables. SELECT queries will not be executed here however. The return value
	 * indicates how many rows were affected. This method will also make sure that
	 * if cache is used, it will reset when data changes.
	 *
	 * @param conn This method requires working database connection.
	 * @param stmt This parameter contains the SQL statement to be excuted.
	 */
	protected int databaseUpdate(Connection conn, PreparedStatement stmt) throws SQLException {

		int result = stmt.executeUpdate();

		return result;
	}

	/**
	 * databaseQuery-method. This method is a helper method for internal use. It
	 * will execute all database queries that will return only one row. The
	 * resultset will be converted to valueObject. If no rows were found,
	 * NotFoundException will be thrown.
	 *
	 * @param conn        This method requires working database connection.
	 * @param stmt        This parameter contains the SQL statement to be excuted.
	 * @param valueObject Class-instance where resulting data will be stored.
	 */
	protected void singleQuery(Connection conn, PreparedStatement stmt, User valueObject)
			throws NotFoundException, SQLException {

		ResultSet result = null;

		try {
			result = stmt.executeQuery();

			if (result.next()) {

				valueObject.setpacienteID(result.getInt("pacienteID"));
				// valueObject.setTarjetaSanitaria(result.getInt("tarjetaSanitaria"));
				valueObject.setSalt(result.getString("salt"));
				valueObject.setTarjetaSanitaria(result.getString("tarjetaSanitaria"));
				valueObject.setPassword(result.getString("password"));

			} else {
				// System.out.println("User Object Not Found!");
				throw new NotFoundException("User Object Not Found!");
			}
		} finally {
			if (result != null)
				result.close();
			if (stmt != null)
				stmt.close();
		}
	}

	protected void singleQueryMedico(Connection conn, PreparedStatement stmt, Medico valueObject)
			throws NotFoundException, SQLException {

		ResultSet result = null;

		try {
			result = stmt.executeQuery();

			if (result.next()) {
				valueObject.setTrabajadorID(result.getInt("trabajadorID"));
				valueObject.setSalt(result.getString("salt"));
				valueObject.setUsername(result.getString("username"));
				valueObject.setPassword(result.getString("password"));
				valueObject.setNombre(result.getString("nombre"));
				valueObject.setApellido1(result.getString("apellido1"));
				valueObject.setApellido2(result.getString("apellido2"));
				valueObject.setTelefono(result.getString("telefono"));
				valueObject.setEmail(result.getString("email"));
				valueObject.setTipo(result.getString("tipo"));

			} else {
				// System.out.println("User Object Not Found!");
				throw new NotFoundException("Medico Object Not Found!");
			}
		} finally {
			if (result != null)
				result.close();
			if (stmt != null)
				stmt.close();
		}
	}

	/**
	 * databaseQuery-method. This method is a helper method for internal use. It
	 * will execute all database queries that will return multiple rows. The
	 * resultset will be converted to the List of valueObjects. If no rows were
	 * found, an empty List will be returned.
	 *
	 * @param conn This method requires working database connection.
	 * @param stmt This parameter contains the SQL statement to be excuted.
	 */
	protected List listQuery(Connection conn, PreparedStatement stmt, boolean variable) throws SQLException {

		ArrayList searchResults = new ArrayList();
		ResultSet result = null;

		try {
			result = stmt.executeQuery();

			while (result.next()) {
				if (variable) {
					User temp = createValueObject();

					temp.setpacienteID(result.getInt("pacienteID"));
					temp.setSalt(result.getString("salt"));
					temp.setTarjetaSanitaria(result.getString("tarjetaSanitaria"));
					temp.setPassword(result.getString("password"));
					
					searchResults.add(temp);
				} else {
					Medico temp = createValueObjectMedico();
					temp.setNombre(result.getString("nombre"));
					temp.setApellido1(result.getString("apellido1"));
					temp.setApellido2(result.getString("apellido2"));
					temp.setEmail(result.getString("email"));
					temp.setPassword(result.getString("password"));
					temp.setSalt(result.getString("salt"));
					temp.setTelefono(result.getString("telefono"));
					temp.setTipo(result.getString("tipo"));
					temp.setUsername(result.getString("username"));
					
					searchResults.add(temp);
				}
			}

		} finally {
			if (result != null)
				result.close();
			if (stmt != null)
				stmt.close();
		}

		return (List) searchResults;
	}

}